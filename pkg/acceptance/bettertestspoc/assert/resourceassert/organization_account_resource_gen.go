// Code generated by assertions generator; DO NOT EDIT.

package resourceassert

import (
	"testing"

	"github.com/Snowflake-Labs/terraform-provider-snowflake/pkg/acceptance/bettertestspoc/assert"
)

type OrganizationAccountResourceAssert struct {
	*assert.ResourceAssert
}

func OrganizationAccountResource(t *testing.T, name string) *OrganizationAccountResourceAssert {
	t.Helper()

	return &OrganizationAccountResourceAssert{
		ResourceAssert: assert.NewResourceAssert(name, "resource"),
	}
}

func ImportedOrganizationAccountResource(t *testing.T, id string) *OrganizationAccountResourceAssert {
	t.Helper()

	return &OrganizationAccountResourceAssert{
		ResourceAssert: assert.NewImportedResourceAssert(id, "imported resource"),
	}
}

///////////////////////////////////
// Attribute value string checks //
///////////////////////////////////

func (o *OrganizationAccountResourceAssert) HasNameString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("name", expected))
	return o
}

func (o *OrganizationAccountResourceAssert) HasAdminNameString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("admin_name", expected))
	return o
}

func (o *OrganizationAccountResourceAssert) HasAdminPasswordString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("admin_password", expected))
	return o
}

func (o *OrganizationAccountResourceAssert) HasAdminRsaPublicKeyString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("admin_rsa_public_key", expected))
	return o
}

func (o *OrganizationAccountResourceAssert) HasCommentString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("comment", expected))
	return o
}

func (o *OrganizationAccountResourceAssert) HasEditionString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("edition", expected))
	return o
}

func (o *OrganizationAccountResourceAssert) HasEmailString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("email", expected))
	return o
}

func (o *OrganizationAccountResourceAssert) HasFirstNameString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("first_name", expected))
	return o
}

func (o *OrganizationAccountResourceAssert) HasLastNameString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("last_name", expected))
	return o
}

func (o *OrganizationAccountResourceAssert) HasMustChangePasswordString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("must_change_password", expected))
	return o
}

func (o *OrganizationAccountResourceAssert) HasRegionString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("region", expected))
	return o
}

func (o *OrganizationAccountResourceAssert) HasRegionGroupString(expected string) *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("region_group", expected))
	return o
}

///////////////////////////////
// Attribute no value checks //
///////////////////////////////

func (o *OrganizationAccountResourceAssert) HasNoName() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("name"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasNoAdminName() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("admin_name"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasNoAdminPassword() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("admin_password"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasNoAdminRsaPublicKey() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("admin_rsa_public_key"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasNoComment() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("comment"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasNoEdition() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("edition"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasNoEmail() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("email"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasNoFirstName() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("first_name"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasNoLastName() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("last_name"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasNoMustChangePassword() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("must_change_password"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasNoRegion() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("region"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasNoRegionGroup() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueNotSet("region_group"))
	return o
}

////////////////////////////
// Attribute empty checks //
////////////////////////////

func (o *OrganizationAccountResourceAssert) HasAdminPasswordEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("admin_password", ""))
	return o
}

func (o *OrganizationAccountResourceAssert) HasAdminRsaPublicKeyEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("admin_rsa_public_key", ""))
	return o
}

func (o *OrganizationAccountResourceAssert) HasCommentEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("comment", ""))
	return o
}

func (o *OrganizationAccountResourceAssert) HasFirstNameEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("first_name", ""))
	return o
}

func (o *OrganizationAccountResourceAssert) HasLastNameEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("last_name", ""))
	return o
}

func (o *OrganizationAccountResourceAssert) HasMustChangePasswordEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("must_change_password", ""))
	return o
}

func (o *OrganizationAccountResourceAssert) HasRegionEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("region", ""))
	return o
}

func (o *OrganizationAccountResourceAssert) HasRegionGroupEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValueSet("region_group", ""))
	return o
}

///////////////////////////////
// Attribute presence checks //
///////////////////////////////

func (o *OrganizationAccountResourceAssert) HasNameNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("name"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasAdminNameNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("admin_name"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasAdminPasswordNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("admin_password"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasAdminRsaPublicKeyNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("admin_rsa_public_key"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasCommentNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("comment"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasEditionNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("edition"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasEmailNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("email"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasFirstNameNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("first_name"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasLastNameNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("last_name"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasMustChangePasswordNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("must_change_password"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasRegionNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("region"))
	return o
}

func (o *OrganizationAccountResourceAssert) HasRegionGroupNotEmpty() *OrganizationAccountResourceAssert {
	o.AddAssertion(assert.ValuePresent("region_group"))
	return o
}
